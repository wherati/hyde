/***
 *  Task to convert `.md` posts in /posts to HTML using the jade template layout indicated in the post's
 *  `layout` YAML front matter.
 *
 *  The task will only convert source files that are newer than their corresponding converted (destination)
 *  file, or if any file has been changed in `/src/templates` (dependency of all posts)
 *
 *  REFACTOR: Figure out a way to customize the dependency change detection to each post based on its individual layout
 */
// Gulp
var gulp = require('gulp')

// Gulp Plugins
var markdown = require('gulp-markdown')
var frontmatter = require('gulp-front-matter')
var rename = require('gulp-rename')
var changed = require('../helpers/changed-with-deps')

// Node packages
var path = require('path')
var lazypipe = require('lazypipe')
var through = require('through2')
var jade = require('jade')

// Local packages
var helpers = require('../helpers/helpers')
var logger = require('../../lib/logger')
var constants = require('../constants')

gulp.task('posts', () => {

  var destination = path.join(constants.build.destination, 'posts')

  logger.debug('[POSTS] : destination: ', destination)

  gulp.src(constants.posts)

    // fix the path going forward to /year/mm/dd/file-name.md
    .pipe(normalize())

    // forward only files newer than their destination, or if we changed a template
    .pipe(removeUnchanged())

    // we need this to get the layout for the post, and to make sure we don't generate
    // garbage text in the HTML from the YAML front matter
    .pipe(getFrontMatter())

    .pipe(filterPublished())

    // convert the post from markdown to HTML with highlighting
    // this is a partial of the post and needs to be injected into the post's
    // layout jade file. The file extension is changed to .html here
    .pipe(markdown({
      highlight: helpers.highlight
    }))

    // create the actual post page. the incoming stream is the HTML of the post's markdown
    // the outgoing stream is a string generated by jade's compilation of the post's layout
    // injected with the post's HTML partial - the file path is /year/mm/dd/file-name.html,
    // which corresponds to the URL created in the src/blog/index.jade file in `blog` task to
    // create a link to this post
    .pipe(createPosts())

    .pipe(gulp.dest(destination))
})


var normalize = lazypipe()

  .pipe(function renameFile() {

    return rename(helpers.mapUrl)

  })

// use custom `hasChanged` method added to `gulp-changed` by `helpers/changed-with-deps` to forward
// only source files that are newer than their corresponding destination file, or if any of the layouts
// in `src/templates` have been changed
var removeUnchanged = lazypipe()

  .pipe(function () {

    var destination = path.join(constants.build.destination, 'posts')

    return changed(destination, {
      extension: '.html',
      deps: [constants.templates]
    })
  })


// remove the front matter from the markdown and add it to the vinyl (https://github.com/gulpjs/vinyl) file
// object under the property `front` - accessible downstream as file.front
var getFrontMatter = lazypipe()

  .pipe(function removeFrontMatter() {

    return frontmatter({
      property: 'front',
      remove: true
    })

  })


function filterPublished() {

  return through.obj(function (vinylFile, enc, cb) {

    logger.debug('[BLOG] : vinylFile.front.status : ' + vinylFile.front.status)
    if (constants.build.env === 'development' || vinylFile.front.status === 'publish') {
      this.push(vinylFile)
    }

    cb()
  })
}

// For each HTML stream corresponding to a post markdown file, compile the jade template corresponding to
// file.front.layout, passing in the post's markdown to HTML compiled string in a `postPartial` field
var createPosts = function () {

  return through.obj(function (vinylFile, enc, cb) {

    var layout = vinylFile.front.layout || 'post-layout'
    layout = path.join(constants.layoutsDir, layout) + '.jade'

    logger.debug('[POSTS] : ' + 'layout: ' + layout)

    var postPartialHtml = vinylFile.contents.toString()

    logger.verbose(postPartialHtml)

    var fn = jade.compileFile(layout, {
      pretty: true,
      basedir: './'
    })

    var html = fn({
      postPartial: postPartialHtml,
      name: 'John Doe'
    })

    logger.debug(html)

    vinylFile.contents = new Buffer(html)

    this.push(vinylFile)
    cb()

  })

}